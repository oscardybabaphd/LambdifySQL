name: Build and Publish LambdifySQL to NuGet

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 2.0.1)'
        required: false
        default: ''

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './LambdifySQL/LambdifySQL.csproj'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4
      
    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 'Restore packages'
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: 'Build project'
      run: dotnet build ${{ env.PROJECT_PATH }} --no-restore --configuration Release
      
    - name: 'Run tests'
      run: dotnet test --no-build --configuration Release --verbosity normal
      continue-on-error: true
      
    - name: 'Create package output directory'
      run: mkdir -p ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
      
    - name: 'Pack project'
      run: dotnet pack ${{ env.PROJECT_PATH }} --no-build --configuration Release --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
      
    - name: 'Upload package artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg

  deploy:
    name: 'Deploy to NuGet'
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (contains(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: 'Download package artifacts'
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
        
    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 'Push packages to NuGet'
      run: |
        for package in ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
        do
          echo "Publishing $package"
          dotnet nuget push "$package" --api-key "${{ secrets.NUGET_API_KEY }}" --source "${{ env.NUGET_SOURCE_URL }}" --skip-duplicate
        done
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

  create-release:
    name: 'Create GitHub Release'
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4
      
    - name: 'Download package artifacts'
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
        
    - name: 'Create Release'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: LambdifySQL ${{ github.ref_name }}
        body: |
          ## LambdifySQL ${{ github.ref_name }}
          
          ### Features
          - Fluent SQL query builder for .NET 8
          - Type-safe lambda expressions to SQL conversion
          - Support for multiple SQL dialects (SQL Server, MySQL, PostgreSQL, SQLite)
          - Advanced query support (CTEs, Window Functions, Joins, Aggregates)
          - Column selection with `.Column<>()` method
          - Collection-based `.WhereIn()` method
          - Expression-based `.Set()` method for updates
          
          ### Installation
          ```bash
          dotnet add package LambdifySQL
          ```
          
          ### Quick Start
          ```csharp
          var query = SqlQuery.Select<Product>()
              .Column(p => p.Name)
              .Column(p => p.Price, "ProductPrice")
              .Where(p => p.IsActive)
              .WhereIn(p => p.CategoryId, new[] { 1, 2, 3 })
              .OrderBy(p => p.Name);
          ```
          
          See the [README](README.md) for more examples and documentation.
        draft: false
        prerelease: false
        
    - name: 'Upload Release Assets'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/LambdifySQL.*.nupkg
        asset_name: LambdifySQL.${{ github.ref_name }}.nupkg
        asset_content_type: application/zip
